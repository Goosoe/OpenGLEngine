replace assimp with https://github.com/tinyobjloader/tinyobjloader

# Terrain
- Create a terrain demo using a plane mesh and optimization
    - [x] Make function for generating a mesh with arbitrary size
    - [x] Make mesh change height with noise
    - [x] Calculate normals for vertices to have better shading
    - [x] Replace Vertex and Mesh created in Terrain Model. Just refactor it pls
    - [x] Average normals with data from adjacent vertices, right now it's just replacing old normal with the most recently calculated one
    - [x] Add texture + calculate texture coords
    - [x] Create a patch.cpp class that acts similar to mesh but for printing a patch
    - [] Add noise height again. Investigate how to send proper data to tesselation evaluation shader. Maybe use interpolation?
    - [] Recreate Terrain level to TerrainTesselation then change as necessary
    - [] Make it bigger + Optimize it 
    - [] mipmap the mesh
    - [] Make it infinite by repositioning the center of the mesh to the camera
    - [] Research fractal brownian motion for better map creation
    - [] Add moving sunlight that affects shader shadowing effects
    - [x] Refactor and clean code. ModelLoader namespace is handling manual mesh drawing which does not make sense. Either separate class/structs or make something specific for terrain level, idk

# General
    - [] Add imgui to project
    - [] Add level switch on main.cpp
    - [] Add functions to dispose of shaders and other stored data on level switches 
    - [] Update entity normals when rotating it. This comes in question: does each entity store its own normals list? or do we calculate 
    - [] Model must have the original normals or place in memory where the shader fetches it and a list of processed normals for each entity rotation value?
    - [] Make model/entity functions for manually created meshes
    - [] Make entity draw() function work with both loaded model and handmade model/textures
    - [] Hot reload shaders



Questions/investigate:
    - Tesselation Evaluation shader. Now that we create multiple vertices in Tesselation shader, we have to calculate the normals per vertex, unlike pre-calculating as we did. Is it possible to calculate part of the normal matrix still?
